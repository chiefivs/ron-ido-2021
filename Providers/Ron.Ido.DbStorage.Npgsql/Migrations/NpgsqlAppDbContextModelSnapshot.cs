// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ron.Ido.DbStorage.Npgsql;

namespace Ron.Ido.DbStorage.Npgsql.Migrations
{
    [DbContext(typeof(NpgsqlAppDbContext))]
    partial class NpgsqlAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("Id");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAim", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyAims");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyBarCode", b =>
                {
                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<long>("ApplyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AssignTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("BarCode");

                    b.HasIndex("ApplyId");

                    b.HasIndex("AssignTime");

                    b.ToTable("ApplyBarCodes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDeliveryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyDeliveryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocFullPackageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ApplyDocFullPackageTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LearnLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LearnLevelId");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyEntryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ApplyEntryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyLearnForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyLearnForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyPassportType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ApplyPassportTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ApplyTemplates");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorEmail")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Name")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Uid");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OldId");

                    b.ToTable("FileInfos");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("Name");

                    b.ToTable("LearnLevels");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyBarCode", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", null)
                        .WithMany("BarCodes")
                        .HasForeignKey("ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.LearnLevel", "LearnLevel")
                        .WithMany("ApplyDocTypes")
                        .HasForeignKey("LearnLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnLevel");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Navigation("BarCodes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Navigation("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

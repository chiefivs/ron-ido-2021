// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ron.Ido.DbStorage.Npgsql;

namespace Ron.Ido.DbStorage.Npgsql.Migrations
{
    [DbContext(typeof(NpgsqlAppDbContext))]
    partial class NpgsqlAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("AcceptTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("AimId")
                        .HasColumnType("bigint");

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BaseLearnDateBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BaseLearnDateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ByWarrant")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatorBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorBirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("CreatorBlock")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorBuilding")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long?>("CreatorCitizenshipId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorCityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorCorpus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long?>("CreatorCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatorFlat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CreatorGender")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatorMailIndex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorPassportReq")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("CreatorPassportTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorStreet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorSurname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("DeliveryFormId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DocAttachmentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("DocBlankNum")
                        .HasColumnType("text");

                    b.Property<long?>("DocCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocDate")
                        .HasColumnType("text");

                    b.Property<int?>("DocDateYear")
                        .HasColumnType("integer");

                    b.Property<string>("DocDescription")
                        .HasColumnType("text");

                    b.Property<string>("DocFullName")
                        .HasColumnType("text");

                    b.Property<string>("DocRegNum")
                        .HasColumnType("text");

                    b.Property<long?>("DocTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DocsWillSendByPost")
                        .HasColumnType("boolean");

                    b.Property<long?>("EntryFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("EpguCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EpguStatus")
                        .HasColumnType("integer");

                    b.Property<string>("FixedLearnSpecialityName")
                        .HasColumnType("text");

                    b.Property<bool>("ForInfoLetter")
                        .HasColumnType("boolean");

                    b.Property<bool>("ForOferta")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatorFirstNameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatorLastNameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreatorSurnameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnglish")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNovorossia")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwnerFirstNameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwnerLastNameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwnerSurnameAbsent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturnOriginalsPostAddressDifferent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRostovFilial")
                        .HasColumnType("boolean");

                    b.Property<string>("OrgCreator")
                        .HasColumnType("text");

                    b.Property<string>("Other")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OwnerBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerBirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("OwnerBlock")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerBuilding")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long?>("OwnerCitizenshipId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerCityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerCorpus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long?>("OwnerCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerFlat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("OwnerGender")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerMailIndex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerPassportReq")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("OwnerPassportTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerStreet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerSurname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PrimaryBarCode")
                        .HasColumnType("text");

                    b.Property<long?>("ReturnOriginalsFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReturnOriginalsPostAddress")
                        .HasColumnType("text");

                    b.Property<string>("SchoolAddress")
                        .HasColumnType("text");

                    b.Property<string>("SchoolCityName")
                        .HasColumnType("text");

                    b.Property<long?>("SchoolCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SchoolEmail")
                        .HasColumnType("text");

                    b.Property<string>("SchoolFax")
                        .HasColumnType("text");

                    b.Property<string>("SchoolName")
                        .HasColumnType("text");

                    b.Property<string>("SchoolPhone")
                        .HasColumnType("text");

                    b.Property<string>("SchoolPostIndex")
                        .HasColumnType("text");

                    b.Property<long?>("SchoolTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SpecialLearnDateBegin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SpecialLearnDateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SpecialLearnFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StatusChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Storage")
                        .HasColumnType("text");

                    b.Property<bool>("TransmitOpenChannels")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("WarrantDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WarrantReq")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("WarrantTerm")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AimId");

                    b.HasIndex("CreatorCitizenshipId");

                    b.HasIndex("CreatorCountryId");

                    b.HasIndex("CreatorPassportTypeId");

                    b.HasIndex("DeliveryFormId");

                    b.HasIndex("DocCountryId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("EntryFormId");

                    b.HasIndex("EpguCode");

                    b.HasIndex("OwnerCitizenshipId");

                    b.HasIndex("OwnerCountryId");

                    b.HasIndex("OwnerPassportTypeId");

                    b.HasIndex("ReturnOriginalsFormId");

                    b.HasIndex("SchoolCountryId");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("SpecialLearnFormId");

                    b.HasIndex("StatusId");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAim", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyAims");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ApplyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<Guid?>("FileInfoUid")
                        .HasColumnType("uuid");

                    b.Property<bool>("Given")
                        .HasColumnType("boolean");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("FileInfoUid");

                    b.HasIndex("TypeId");

                    b.ToTable("ApplyAttachments");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("ForArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("ForPortal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ApplyAttachmentTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyCertificateDeliveryForm", b =>
                {
                    b.Property<long>("ApplyId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeliveryFormId")
                        .HasColumnType("bigint");

                    b.HasKey("ApplyId", "DeliveryFormId");

                    b.HasIndex("DeliveryFormId");

                    b.ToTable("ApplyCertificateDeliveryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDeliveryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDeliveryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocFullPackageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDocFullPackageTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LearnLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeginDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("LearnLevelId");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyEntryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyEntryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyLearnForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyLearnForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyPassportType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyPassportTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AllowStepToStatuses")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionForApplier")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DescriptionForApplierEng")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long?>("EtapId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameForApplier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameForApplierEng")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameForButton")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusEnumValue")
                        .HasColumnType("text");

                    b.Property<bool>("VisibleForApplier")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EtapId");

                    b.ToTable("ApplyStatuses");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ApplyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PrevStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("ChangeTime");

                    b.HasIndex("EndTime");

                    b.HasIndex("PrevStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplyStatusHistories");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyTemplates");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.CertificateDeliveryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("CertificateDeliveryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("A2code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("A3code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<double?>("CoordX")
                        .HasColumnType("double precision");

                    b.Property<double?>("CoordY")
                        .HasColumnType("double precision");

                    b.Property<int?>("EiisCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("IsgaCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LegalizationComment")
                        .HasColumnType("text");

                    b.Property<int?>("LegalizationId")
                        .HasColumnType("integer");

                    b.Property<bool?>("LegalizationNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OksmCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("A2code");

                    b.HasIndex("A3code");

                    b.HasIndex("EiisCode");

                    b.HasIndex("IsgaCode");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OksmCode");

                    b.HasIndex("OldId");

                    b.HasIndex("OrderNum");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Dossier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("ApplyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorEmail")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Name")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Uid");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OldId");

                    b.ToTable("FileInfos");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeginDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("FullName");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("LearnLevels");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Legalization", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("Legalizations");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OldId");

                    b.HasIndex("OrderNum");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ReglamentEtap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("MaxTerm")
                        .HasColumnType("integer");

                    b.Property<int>("MinTerm")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.Property<bool?>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ReglamentEtaps");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("StepApplyStatusesString")
                        .HasColumnType("text");

                    b.Property<string>("ViewApplyStatusesString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.SchoolType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameEng")
                        .HasColumnType("text");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("SchoolType");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.ApplyAim", "Aim")
                        .WithMany()
                        .HasForeignKey("AimId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "CreatorCitizenship")
                        .WithMany()
                        .HasForeignKey("CreatorCitizenshipId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "CreatorCountry")
                        .WithMany()
                        .HasForeignKey("CreatorCountryId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyPassportType", "CreatorPassportType")
                        .WithMany()
                        .HasForeignKey("CreatorPassportTypeId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyDeliveryForm", "DeliveryForm")
                        .WithMany()
                        .HasForeignKey("DeliveryFormId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "DocCountry")
                        .WithMany()
                        .HasForeignKey("DocCountryId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyDocType", "DocType")
                        .WithMany()
                        .HasForeignKey("DocTypeId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyEntryForm", "EntryForm")
                        .WithMany()
                        .HasForeignKey("EntryFormId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "OwnerCitizenship")
                        .WithMany()
                        .HasForeignKey("OwnerCitizenshipId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "OwnerCountry")
                        .WithMany()
                        .HasForeignKey("OwnerCountryId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyPassportType", "OwnerPassportType")
                        .WithMany()
                        .HasForeignKey("OwnerPassportTypeId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyDeliveryForm", "ReturnOriginalsForm")
                        .WithMany()
                        .HasForeignKey("ReturnOriginalsFormId");

                    b.HasOne("Ron.Ido.EM.Entities.Country", "SchoolCountry")
                        .WithMany()
                        .HasForeignKey("SchoolCountryId");

                    b.HasOne("Ron.Ido.EM.Entities.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyLearnForm", "SpecialLearnForm")
                        .WithMany()
                        .HasForeignKey("SpecialLearnFormId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aim");

                    b.Navigation("CreatorCitizenship");

                    b.Navigation("CreatorCountry");

                    b.Navigation("CreatorPassportType");

                    b.Navigation("DeliveryForm");

                    b.Navigation("DocCountry");

                    b.Navigation("DocType");

                    b.Navigation("EntryForm");

                    b.Navigation("OwnerCitizenship");

                    b.Navigation("OwnerCountry");

                    b.Navigation("OwnerPassportType");

                    b.Navigation("ReturnOriginalsForm");

                    b.Navigation("SchoolCountry");

                    b.Navigation("SchoolType");

                    b.Navigation("SpecialLearnForm");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAttachment", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", "Apply")
                        .WithMany("Attachments")
                        .HasForeignKey("ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.FileInfo", "FileInfo")
                        .WithMany()
                        .HasForeignKey("FileInfoUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ron.Ido.EM.Entities.ApplyAttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Apply");

                    b.Navigation("FileInfo");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyCertificateDeliveryForm", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", "Apply")
                        .WithMany("CertificateDeliveryForms")
                        .HasForeignKey("ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.CertificateDeliveryForm", "DeliveryForm")
                        .WithMany()
                        .HasForeignKey("DeliveryFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apply");

                    b.Navigation("DeliveryForm");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.LearnLevel", "LearnLevel")
                        .WithMany("ApplyDocTypes")
                        .HasForeignKey("LearnLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnLevel");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyStatus", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.ReglamentEtap", "Etap")
                        .WithMany()
                        .HasForeignKey("EtapId");

                    b.Navigation("Etap");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyStatusHistory", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", "Apply")
                        .WithMany("StatusHistories")
                        .HasForeignKey("ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.ApplyStatus", "PrevStatus")
                        .WithMany()
                        .HasForeignKey("PrevStatusId");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Apply");

                    b.Navigation("PrevStatus");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Country", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Dossier", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", "Apply")
                        .WithMany("Dossiers")
                        .HasForeignKey("ApplyId");

                    b.Navigation("Apply");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CertificateDeliveryForms");

                    b.Navigation("Dossiers");

                    b.Navigation("StatusHistories");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Navigation("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Region", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

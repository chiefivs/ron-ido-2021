// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ron.Ido.DbStorage.Npgsql;

namespace Ron.Ido.DbStorage.Npgsql.Migrations
{
    [DbContext(typeof(NpgsqlAppDbContext))]
    [Migration("20210524082333_Correct_indexes")]
    partial class Correct_indexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("ByWarrant")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatorBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorBlock")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorBuilding")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorCityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorCorpus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatorFlat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatorMailIndex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatorPassportReq")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CreatorPassportTypeId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatorPassportTypeId1")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorStreet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatorSurname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DocCountryId")
                        .HasColumnType("integer");

                    b.Property<string>("EpguCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("OwnerBirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OwnerBlock")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerBuilding")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerCityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerCorpus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerFlat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerMailIndex")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("OwnerPassportReq")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("OwnerPassportTypeId")
                        .HasColumnType("integer");

                    b.Property<long?>("OwnerPassportTypeId1")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerPhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerStreet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerSurname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("WarrantDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WarrantReq")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("WarrantTerm")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorPassportTypeId1");

                    b.HasIndex("OwnerPassportTypeId1");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyAim", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.ToTable("ApplyAims");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyBarCode", b =>
                {
                    b.Property<string>("BarCode")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<long>("ApplyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AssignTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("BarCode");

                    b.HasIndex("ApplyId");

                    b.HasIndex("AssignTime");

                    b.HasIndex("BarCode");

                    b.ToTable("ApplyBarCodes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDeliveryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDeliveryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocFullPackageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDocFullPackageTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LearnLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeginDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("LearnLevelId");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyEntryForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyEntryForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyLearnForm", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyLearnForms");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyPassportType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyPassportTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("ApplyTemplates");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("A2code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("A3code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<double?>("CoordX")
                        .HasColumnType("double precision");

                    b.Property<double?>("CoordY")
                        .HasColumnType("double precision");

                    b.Property<int?>("EiisCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("IsgaCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LegalizationComment")
                        .HasColumnType("text");

                    b.Property<int?>("LegalizationId")
                        .HasColumnType("integer");

                    b.Property<bool?>("LegalizationNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OksmCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<long?>("RegionId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("A2code");

                    b.HasIndex("A3code");

                    b.HasIndex("EiisCode");

                    b.HasIndex("IsgaCode");

                    b.HasIndex("Name");

                    b.HasIndex("NameEng");

                    b.HasIndex("OksmCode");

                    b.HasIndex("OrderNum");

                    b.HasIndex("RegionId1");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorEmail")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Name")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<int>("OldId")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Uid");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OldId");

                    b.ToTable("FileInfos");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeginDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("FullName");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("LearnLevels");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Legalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("Legalizations");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrderNum");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.ApplyPassportType", "CreatorPassportType")
                        .WithMany()
                        .HasForeignKey("CreatorPassportTypeId1");

                    b.HasOne("Ron.Ido.EM.Entities.ApplyPassportType", "OwnerPassportType")
                        .WithMany()
                        .HasForeignKey("OwnerPassportTypeId1");

                    b.Navigation("CreatorPassportType");

                    b.Navigation("OwnerPassportType");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyBarCode", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Apply", "Apply")
                        .WithMany("BarCodes")
                        .HasForeignKey("ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apply");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.ApplyDocType", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.LearnLevel", "LearnLevel")
                        .WithMany("ApplyDocTypes")
                        .HasForeignKey("LearnLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LearnLevel");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Country", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId1");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.FileInfo", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.RolePermission", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.UserRole", b =>
                {
                    b.HasOne("Ron.Ido.EM.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ron.Ido.EM.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Apply", b =>
                {
                    b.Navigation("BarCodes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.LearnLevel", b =>
                {
                    b.Navigation("ApplyDocTypes");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Region", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Ron.Ido.EM.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
